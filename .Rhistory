swirl()
install.packages("swril")
install.packages("swril")
install.packages("swirl")
libary(swirl)
library(swirl)
swirl()
1:20
pi:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by 0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep (0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vec <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
rm(num_vec)
tf <- num_vect < 1
print(tf)
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- "Pedro"
my_name <- c(my_char, "Pedro")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("x","y","z"),sep = "")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(z,y),100)
my_data <- sample(c(y,z),100)
my_na <- is.na()
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na==TRUE)
sum(my_na=)
sum(my_na)
my_na
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
indentical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
atributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_variable
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patients","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
my_data
colnames(my_data) <- cnames
my_data
ls
rm(ls())
ls()
library(datasets)
data("iris")
?iris
iris
split(iris,iris$Species)
L <- split(iris,iris$Species)
L
str(L)
L$virginica
virg <- L$virginica
virg
mean(virg$Sepal.Length)
colMeans(iris)
apply(iris[,1:4],2,mean)
v <- apply(iris[,1:4],2,mean)
class(v)
v <- apply(iris[,1:4],1,mean)
v
data("mtcars")
?mtcars
mtcars
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?tapply
?mtcars
tapply(mtcars$hp,mtcars$cyl,mean)
209.2142-82.636
debug(ls)
ls()
exit
quit
esc
C
C
w
debuggingState(on=FALSE)
getwd()
dir
dir()
outcome_care_measures <- read.csv("outcome-of-care-measures")
outcome_care_measures <- read.csv("outcome-of-care-measures.csv")
str(outcome_care_measures)
colnames(outcome_care_measures)
as.numeric(outcome_care_measures[,17])
outcome_care_measures[,17]
outcome_care_measures[1,17]
as.numeric(outcome_care_measures[1,17])
class(outcome_care_measures[1,17])
as.numeric(levels(outcome_care_measures[1,17]))[outcome_care_measures[1,17]]
as.numeric(levels(outcome_care_measures[1,17]))[outcome_care_measures[,17]]
as.numeric(levels(outcome_care_measures[,17]))[outcome_care_measures[,17]]
?levels
estados <- as.character(outcome_care_measures$State)
as.numeric(as.character(outcome_care_measures[,17]))
heart-att <- as.numeric(as.character(outcome_care_measures[,17]))
heart_Att <- as.numeric(as.character(outcome_care_measures[,17]))
tapply(heart_Att, estados, min)
?min
tapply(heart_Att, estados, min(na.rm = TRUE))
tapply(heart_Att, estados, min, na.rm = TRUE)
best_heart <- tapply(heart_Att, estados, min, na.rm = TRUE)
best_heart$AK
best_heart[AK]
best_heart[1]
class(best_heart)
dim(best_heart)
as.numeric(best_heart)
best_heart <- tapply(heart_Att, estados, which.min, na.rm = TRUE)
best_heart <- tapply(heart_Att, estados, which.min)
tapply(heart_Att, estados, which.min)
c(outcome_care_measures$Hospital.Name, outcome_care_measures$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
comb <. c(outcome_care_measures$Hospital.Name, outcome_care_measures$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
comb <- c(outcome_care_measures$Hospital.Name, outcome_care_measures$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
comb
head(comb)
dir()
ouctome <- read.csv("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv")
outcomeCompact <- outcome(as.character(outcome$State))
outcomeCompact <- outcome(as.character(outcome$State))
outcomeCompact <- (as.character(outcome$State))
colnames(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
class(otucome)
class(outcome)
class(outcome$State)
outcomeCompact <- c(outcome$Hospital.Name,outcome$State,as.numeric(outcome[,11]),as.numeric(outcome[,17]),as.numeric(outcome[,23]))
class(outcomeCompact)
class(outcomeCompact[1])
outcomeCompact[1]
outcomeCompact[2]
c(1:3,2)
a <- c(1:3,2)
a[1]
a <- list(1:3,2)
a[1]
outcomeCompact <- list(outcome$Hospital.Name,outcome$State,as.numeric(outcome[,11]),as.numeric(outcome[,17]),as.numeric(outcome[,23]))
class(outcomeCompact[1])
class(outcomeCompact[4])
class(outcomeCompact[4,1])
class(outcomeCompact[4][1])
outcomeCompact[4][1]
outcomeCompact[4][2]
unlist(outcomeCompact[4])[1]
split(outcomeCompact,outcome$State)
split(outcome$Hospital.Name, outcome[hospital.state])
split(outcome$Hospital.Name, outcome$State)
splittedHospitalssplit(outcome$Hospital.Name, outcome$State)
splittedHospitals <- split(outcome$Hospital.Name, outcome$State)
splittedHospitals$WY
estado <- "WY"
splittedHospitals$estado
splittedHospitals[estado]
rm(list=ls())
source(best.R)
source("best.R")
indexMin <- which.min(splittedHeartAttacks["TX"]
)
splittedHeartAttacks["TX"]
class(splittedHeartAttacks["TX"])
class(unlist(splittedHeartAttacks["TX"]))
indexMin <- which.min(unlist(splittedHeartAttacks["TX"]))
which.min(unlist(splittedHeartAttacks["TX"]))
source("best.R")
best("TX","nada")
source("best.R")
best("TX","nada")
indexMin
gsub(" ", "", "MEu nome eh pedro", fixed = TRUE)
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("TX","heart failure")
best("MD","heart attack")
best("MD","heart pneumonia")
best("MD","pneumonia")
rm(splittedHeartAttacks)
source("best.R")
?order
order(unlist(splittedOutcome[state]),unlist(splittedHospitals[state]))
order(unlist(splittedOutcome[state]),unlist(splittedHeartAttack[state]))
order(unlist(splittedHeartAttack[state]),unlist(splittedHospitals[state]))
order(unlist(splittedHeartAttack["TX"]),unlist(splittedHospitals["TX"]))
order(unlist(splittedHospitals["TX"]),unlist(splittedHeartAttack["TX"]))
a <- c(1,2,3,5,6,78,64,32,1)
b <- c(9:1)
order(a,b)
order(b,a)
order(a)
splittedOutcome <- splittedHeartAttack
state <- "TX"
unlist(splittedHospitals[state])[order(unlist(splittedOutcome[state]))]
state <- "MD"
unlist(splittedHospitals[state])[order(unlist(splittedOutcome[state]))]
state <- "TX"
unlist(splittedHospitals[state])[order(unlist(splittedOutcome[state]))]
order(unlist(splittedOutcome[state]))
order(unlist(splittedOutcome[state]))[1]
index <- order(unlist(splittedOutcome[state]))
index[1]
index[2]
unlist(splittedOutcome[state])[1]
unlist(splittedOutcome[state])[210]
unlist(splittedOutcome[state])[174]
splittedOutcome <- splittedHeartFailure
unlist(splittedHospitals[state])[order(unlist(splittedOutcome[state]))]
index <- [order(unlist(splittedOutcome[state])),unlist(splittedHospitals[state])]
index <- order(unlist(splittedOutcome[state]),unlist(splittedHospitals[state]))
unlist(splittedHospitals[state])[index]
source("rankhospital.R")
source("rankhospital.R")
rankHospital("TX","heart attack")
source("rankhospital.R")
rankHospital("TX","heart attack")
rankHospital("TX","heart attack",1)
rankHospital("TX","heart failure",4)
source("rankhospital.R")
rankHospital("TX","heart failure",4)
rankHospital("MD","heart attack","worst")
rankHospital("MD","heart attack","best")
source("rankhospital.R")
rankHospital("MD","heart attack","worst")
splittedHospitals
splittedHospitals[MD]
splittedHospitals$MD
rankHospital("MD","heart attack",45)
unlist(splittedHeartAttack["MD"])
NA
oi
source("rankhospital.R")
rankHospital("MD","heart attack","worst")
levels(outcome$State)
outcome$State
levels(outcome$State)
?levels
unique(outcome$State)
unique(outcome$State)[1]
source("rankall.R")
rankall("heart attack", 1)
rankall("heart attack", 1)
rankall("heart attack", 1)
source("rankall.R")
rankall("heart attack", 1)
source("rankall.R")
rankall("heart attack", 1)
length( unique(outcome$State))
source("rankall.R")
rankall("heart attack", 1)
rankall("heart attack", 10)
states
source("rankall.R")
rankall("heart attack", 10)
source("rankall.R")
rankall("heart attack", 10)
rankall("heart attack", 20)
head(rankall("heart attack", 20),10)
head(rankall("pneumonia", "worst"),3)
tail(rankall("pneumonia", "worst"),3)
dir
dir()
rankHospital("WY","pneumonia",worst)
rankHospital("WY","pneumonia","worst")
tail(rankall("pneumonia", "worst"),3)
source("rankall.R")
tail(rankall("pneumonia", "worst"),3)
tail(rankall("heart failure"),10)
matriz <- rankall("heart failure")
colnames(matriz) <- c("a","b")
matriz
colnames(matriz) <- c("a","b")
source("rankall.R")
matriz <- rankall("heart failure")
matriz
source("best.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankHospital("NC","heart attack", "worst")
rankHospital("WA","heart attack", 7)
rankHospital("TX","pneumonia",10)
rankHospital("NY","heart attack",7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, state == "HI")[hospital})
as.character(subset(r, state == "HI")[hospital])
as.character(subset(r, state == "HI")[Hospital])
r <- rankall("heart attack", 4)
r
r <- rankall("pneumonia", "worst")
r
r <- rankall("heart failure", 10)
r
setwd()
setwd("Github/ProgrammingAssignment2/.git/hooks")
dir
dir()
setwd("../../")
getwd()
dir()
source("cachematrix.R")
source("cachematrix.R")
matriz <- x$set(matrix(ncol = 2,nrow =2)
)
matriz <- makeCacheMatrix(matrix(ncol = 2,nrow =2)
)
matriz$set()
matriz$get()
matriz$set(matrix(1:4),nrol=2,ncol=2)
?matrix
matriz$set(matrix(1:4,nrol=2,ncol=2))
umaMatriz <- matrix(1:4,2,2)
umaMatriz
matriz$set(umaMatriz)
matriy
matriz
cacheSolve(umaMatriz)
cacheSolve(matriz)
cacheSolve(matriz)
